# coding: utf-8

"""
Agent Protocol

Specification of the API protocol for communication with an agent.

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator

from agent_protocol_client.models.artifact import Artifact

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Step(BaseModel):
    """
    Step
    """  # noqa: E501

    input: Optional[StrictStr] = Field(
        default=None, description="Input prompt for the step."
    )
    additional_input: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Input parameters for the task step. Any value is allowed.",
    )
    task_id: StrictStr = Field(description="The ID of the task this step belongs to.")
    step_id: StrictStr = Field(description="The ID of the task step.")
    name: Optional[StrictStr] = Field(
        default=None, description="The name of the task step."
    )
    status: StrictStr = Field(description="The status of the task step.")
    output: Optional[StrictStr] = Field(
        default=None, description="Output of the task step."
    )
    additional_output: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Output that the task step has produced. Any value is allowed.",
    )
    artifacts: List[Artifact] = Field(
        description="A list of artifacts that the step has produced."
    )
    is_last: StrictBool = Field(
        description="Whether this is the last step in the task."
    )
    __properties: ClassVar[List[str]] = [
        "input",
        "additional_input",
        "task_id",
        "step_id",
        "name",
        "status",
        "output",
        "additional_output",
        "artifacts",
        "is_last",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("created", "running", "completed"):
            raise ValueError(
                "must be one of enum values ('created', 'running', 'completed')"
            )
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Step from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item in self.artifacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict["artifacts"] = _items
        # set to None if input (nullable) is None
        # and model_fields_set contains the field
        if self.input is None and "input" in self.model_fields_set:
            _dict["input"] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        # set to None if output (nullable) is None
        # and model_fields_set contains the field
        if self.output is None and "output" in self.model_fields_set:
            _dict["output"] = None

        # set to None if additional_output (nullable) is None
        # and model_fields_set contains the field
        if (
            self.additional_output is None
            and "additional_output" in self.model_fields_set
        ):
            _dict["additional_output"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Step from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "input": obj.get("input"),
                "additional_input": obj.get("additional_input"),
                "task_id": obj.get("task_id"),
                "step_id": obj.get("step_id"),
                "name": obj.get("name"),
                "status": obj.get("status"),
                "output": obj.get("output"),
                "additional_output": obj.get("additional_output"),
                "artifacts": [
                    Artifact.from_dict(_item) for _item in obj.get("artifacts")
                ]
                if obj.get("artifacts") is not None
                else None,
                "is_last": obj.get("is_last")
                if obj.get("is_last") is not None
                else False,
            }
        )
        return _obj
