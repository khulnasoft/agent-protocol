# coding: utf-8

"""
Agent Protocol

Specification of the API protocol for communication with an agent.

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Artifact(BaseModel):
    """
    An Artifact either created by or submitted to the agent.
    """  # noqa: E501

    artifact_id: StrictStr = Field(description="ID of the artifact.")
    agent_created: StrictBool = Field(
        description="Whether the artifact has been created by the agent."
    )
    file_name: StrictStr = Field(description="Filename of the artifact.")
    relative_path: Optional[StrictStr] = Field(
        default=None,
        description="Relative path of the artifact in the agent's workspace.",
    )
    __properties: ClassVar[List[str]] = [
        "artifact_id",
        "agent_created",
        "file_name",
        "relative_path",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Artifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # set to None if relative_path (nullable) is None
        # and model_fields_set contains the field
        if self.relative_path is None and "relative_path" in self.model_fields_set:
            _dict["relative_path"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Artifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "artifact_id": obj.get("artifact_id"),
                "agent_created": obj.get("agent_created"),
                "file_name": obj.get("file_name"),
                "relative_path": obj.get("relative_path"),
            }
        )
        return _obj
