# coding: utf-8

"""
Agent Protocol

Specification of the API protocol for communication with an agent.

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List

from pydantic import BaseModel, Field, StrictInt

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Pagination(BaseModel):
    """
    Pagination
    """  # noqa: E501

    total_items: StrictInt = Field(description="Total number of items.")
    total_pages: StrictInt = Field(description="Total number of pages.")
    current_page: StrictInt = Field(description="Current_page page number.")
    page_size: StrictInt = Field(description="Number of items per page.")
    __properties: ClassVar[List[str]] = [
        "total_items",
        "total_pages",
        "current_page",
        "page_size",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Pagination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Pagination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "total_items": obj.get("total_items"),
                "total_pages": obj.get("total_pages"),
                "current_page": obj.get("current_page"),
                "page_size": obj.get("page_size"),
            }
        )
        return _obj
